"""initial org resource

Revision ID: 9800e50d3c16
Revises: None
Create Date: 2016-06-29 12:36:56.535256

"""

# revision identifiers, used by Alembic.
revision = '9800e50d3c16'
down_revision = None

from alembic import op
import sqlalchemy as sa
from sqlalchemy import Column
import sqlalchemy_utils
from sqlalchemy_utils import CompositeArray

import fhir_server
from fhir_server.elements.primitives import *
from fhir_server.elements.opentype import OpenType
from fhir_server.elements.base.complex_mixin import PgComposite


from fhir_server.resources import all_resources, constraints

def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('organization',
    sa.Column('id', fhir_server.elements.primitives.IdField(), nullable=False),
    sa.Column('implicitRules', fhir_server.elements.primitives.URIField(), nullable=True),
    sa.Column('language', fhir_server.elements.primitives.CodeField(), nullable=True),
    sa.Column('active', fhir_server.elements.primitives.BooleanField(), nullable=True),
    sa.Column('name', fhir_server.elements.primitives.StringField(), nullable=True),
    sa.Column('identifier', sqlalchemy_utils.types.pg_composite.CompositeArray(PgComposite('fhir_identifier', [Column('extension', PgComposite('fhir_extension', [Column('url', StringField(), nullable=False), Column('value', OpenType())])), Column('id', StringField()), Column('system', URIField()), Column('use', CodeField()), Column('value', StringField()), Column('assigner', PgComposite('fhir_reference', [Column('extension', PgComposite('fhir_extension', [Column('url', StringField(), nullable=False), Column('value', OpenType())])), Column('id', StringField()), Column('display', StringField()), Column('reference', StringField())])), Column('period', PgComposite('fhir_period', [Column('extension', PgComposite('fhir_extension', [Column('url', StringField(), nullable=False), Column('value', OpenType())])), Column('id', StringField()), Column('end_time', DateTimeField(timezone=True)), Column('start_time', DateTimeField(timezone=True))])), Column('type', PgComposite('fhir_codeableconcept', [Column('extension', PgComposite('fhir_extension', [Column('url', StringField(), nullable=False), Column('value', OpenType())])), Column('id', StringField()), Column('text', StringField()), Column('coding', CompositeArray(PgComposite('fhir_coding', [Column('extension', PgComposite('fhir_extension', [Column('url', StringField(), nullable=False), Column('value', OpenType())])), Column('id', StringField()), Column('code', CodeField()), Column('display', StringField()), Column('system', URIField()), Column('user_selected', BooleanField()), Column('version', StringField())])))]))])), nullable=True),
    sa.Column('type', fhir_server.elements.base.complex_mixin.PgComposite('fhir_codeableconcept', [Column('extension', PgComposite('fhir_extension', [Column('url', StringField(), nullable=False), Column('value', OpenType())])), Column('id', StringField()), Column('text', StringField()), Column('coding', CompositeArray(PgComposite('fhir_coding', [Column('extension', PgComposite('fhir_extension', [Column('url', StringField(), nullable=False), Column('value', OpenType())])), Column('id', StringField()), Column('code', CodeField()), Column('display', StringField()), Column('system', URIField()), Column('user_selected', BooleanField()), Column('version', StringField())])))]), nullable=True),
    sa.Column('telecom', sqlalchemy_utils.types.pg_composite.CompositeArray(PgComposite('fhir_contactpoint', [Column('extension', PgComposite('fhir_extension', [Column('url', StringField(), nullable=False), Column('value', OpenType())])), Column('id', StringField()), Column('rank', PositiveIntField()), Column('system', CodeField()), Column('use', CodeField()), Column('value', StringField()), Column('period', PgComposite('fhir_period', [Column('extension', PgComposite('fhir_extension', [Column('url', StringField(), nullable=False), Column('value', OpenType())])), Column('id', StringField()), Column('end_time', DateTimeField(timezone=True)), Column('start_time', DateTimeField(timezone=True))]))])), nullable=True),
    sa.Column('address', sqlalchemy_utils.types.pg_composite.CompositeArray(PgComposite('fhir_address', [Column('extension', PgComposite('fhir_extension', [Column('url', StringField(), nullable=False), Column('value', OpenType())])), Column('id', StringField()), Column('city', StringField()), Column('country', StringField()), Column('district', StringField()), Column('line', CompositeArray(StringField())), Column('postal_code', StringField()), Column('state', StringField()), Column('type', CodeField()), Column('text', StringField()), Column('use', CodeField()), Column('period', PgComposite('fhir_period', [Column('extension', PgComposite('fhir_extension', [Column('url', StringField(), nullable=False), Column('value', OpenType())])), Column('id', StringField()), Column('end_time', DateTimeField(timezone=True)), Column('start_time', DateTimeField(timezone=True))]))])), nullable=True),
    sa.Column('part_of', fhir_server.elements.base.complex_mixin.PgComposite('fhir_reference', [Column('extension', PgComposite('fhir_extension', [Column('url', StringField(), nullable=False), Column('value', OpenType())])), Column('id', StringField()), Column('display', StringField()), Column('reference', StringField())]), nullable=True),
    sa.Column('contact', sqlalchemy_utils.types.pg_composite.CompositeArray(PgComposite('fhir_organizationcontact', [Column('extension', PgComposite('fhir_extension', [Column('url', StringField(), nullable=False), Column('value', OpenType())])), Column('id', StringField()), Column('purpose', PgComposite('fhir_codeableconcept', [Column('extension', PgComposite('fhir_extension', [Column('url', StringField(), nullable=False), Column('value', OpenType())])), Column('id', StringField()), Column('text', StringField()), Column('coding', CompositeArray(PgComposite('fhir_coding', [Column('extension', PgComposite('fhir_extension', [Column('url', StringField(), nullable=False), Column('value', OpenType())])), Column('id', StringField()), Column('code', CodeField()), Column('display', StringField()), Column('system', URIField()), Column('user_selected', BooleanField()), Column('version', StringField())])))])), Column('name', PgComposite('fhir_humanname', [Column('extension', PgComposite('fhir_extension', [Column('url', StringField(), nullable=False), Column('value', OpenType())])), Column('id', StringField()), Column('family', CompositeArray(StringField())), Column('given', CompositeArray(StringField())), Column('prefix', CompositeArray(StringField())), Column('suffix', CompositeArray(StringField())), Column('text', StringField()), Column('use', CodeField()), Column('period', PgComposite('fhir_period', [Column('extension', PgComposite('fhir_extension', [Column('url', StringField(), nullable=False), Column('value', OpenType())])), Column('id', StringField()), Column('end_time', DateTimeField(timezone=True)), Column('start_time', DateTimeField(timezone=True))]))])), Column('address', PgComposite('fhir_address', [Column('extension', PgComposite('fhir_extension', [Column('url', StringField(), nullable=False), Column('value', OpenType())])), Column('id', StringField()), Column('city', StringField()), Column('country', StringField()), Column('district', StringField()), Column('line', CompositeArray(StringField())), Column('postal_code', StringField()), Column('state', StringField()), Column('type', CodeField()), Column('text', StringField()), Column('use', CodeField()), Column('period', PgComposite('fhir_period', [Column('extension', PgComposite('fhir_extension', [Column('url', StringField(), nullable=False), Column('value', OpenType())])), Column('id', StringField()), Column('end_time', DateTimeField(timezone=True)), Column('start_time', DateTimeField(timezone=True))]))])), Column('telecom', CompositeArray(PgComposite('fhir_contactpoint', [Column('extension', PgComposite('fhir_extension', [Column('url', StringField(), nullable=False), Column('value', OpenType())])), Column('id', StringField()), Column('rank', PositiveIntField()), Column('system', CodeField()), Column('use', CodeField()), Column('value', StringField()), Column('period', PgComposite('fhir_period', [Column('extension', PgComposite('fhir_extension', [Column('url', StringField(), nullable=False), Column('value', OpenType())])), Column('id', StringField()), Column('end_time', DateTimeField(timezone=True)), Column('start_time', DateTimeField(timezone=True))]))])))])), nullable=True),
    sa.Column('meta', fhir_server.elements.base.complex_mixin.PgComposite('fhir_meta', [Column('extension', PgComposite('fhir_extension', [Column('url', StringField(), nullable=False), Column('value', OpenType())])), Column('id', StringField()), Column('version_id', IdField()), Column('last_updated', InstantField(timezone=True)), Column('profile', CompositeArray(URIField())), Column('security', CompositeArray(PgComposite('fhir_coding', [Column('extension', PgComposite('fhir_extension', [Column('url', StringField(), nullable=False), Column('value', OpenType())])), Column('id', StringField()), Column('code', CodeField()), Column('display', StringField()), Column('system', URIField()), Column('user_selected', BooleanField()), Column('version', StringField())]))), Column('tag', CompositeArray(PgComposite('fhir_coding', [Column('extension', PgComposite('fhir_extension', [Column('url', StringField(), nullable=False), Column('value', OpenType())])), Column('id', StringField()), Column('code', CodeField()), Column('display', StringField()), Column('system', URIField()), Column('user_selected', BooleanField()), Column('version', StringField())])))]), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    ### end Alembic commands ###

    conn = op.get_bind()
    for resource in all_resources:
        conn.execute(sa.sql.text(
            '''
            DROP INDEX IF EXISTS {0}_meta_version_id;

            CREATE UNIQUE INDEX {0}_meta_version_id ON {0} (
                ((meta).version_id));

            DROP TRIGGER IF EXISTS meta_version_id_concurrency ON {0};

            CREATE TRIGGER meta_version_id_concurrency BEFORE INSERT OR UPDATE ON {0}
            FOR EACH ROW EXECUTE PROCEDURE meta_version_id_concurrency();
            '''.format(resource.__tablename__)
        ))

    profiled_resources = {con.get('resource'): con.get('fields') for con in constraints}
    for resource, const in profiled_resources.items():
        for c in const:
            field = c.get('name')
            mini = str(c.get('cardinality').get('mini'))
            maxi = str(c.get('cardinality').get('maxi'))
            conn.execute(sa.sql.text(
                '''
                DROP TRIGGER IF EXISTS validate_meta_fields_{1} ON {0};

                CREATE TRIGGER validate_meta_fields_{1} BEFORE INSERT OR UPDATE ON {0}
                FOR EACH ROW EXECUTE PROCEDURE validate_meta_fields({1}, '{2}', '{3}');
                '''.format(resource.lower(), field, mini, maxi)
            ))


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('organization')
    ### end Alembic commands ###

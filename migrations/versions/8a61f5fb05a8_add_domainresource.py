"""Add DomainResource

Revision ID: 8a61f5fb05a8
Revises: f8787deba0e9
Create Date: 2016-06-30 11:27:25.367133

"""

# revision identifiers, used by Alembic.
revision = "8a61f5fb05a8"
down_revision = "f8787deba0e9"

from alembic import op
import sqlalchemy as sa
from sqlalchemy import Column
import sqlalchemy_utils
from sqlalchemy_utils import CompositeArray, JSONType

import fhir_server
from fhir_server.elements.primitives import *
from fhir_server.elements.opentype import OpenType
from fhir_server.elements.base.complex_mixin import PgComposite


from fhir_server.resources import all_resources, constraints


def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "organization",
        sa.Column(
            "contained",
            sqlalchemy_utils.types.pg_composite.CompositeArray(JSONType()),
            nullable=True,
        ),
    )
    op.add_column(
        "organization",
        sa.Column(
            "extension",
            sqlalchemy_utils.types.pg_composite.CompositeArray(
                PgComposite(
                    "fhir_extension",
                    [
                        Column("url", StringField(), nullable=False),
                        Column("value", OpenType()),
                    ],
                )
            ),
            nullable=True,
        ),
    )
    op.add_column(
        "organization",
        sa.Column(
            "modifierExtension",
            sqlalchemy_utils.types.pg_composite.CompositeArray(
                PgComposite(
                    "fhir_extension",
                    [
                        Column("url", StringField(), nullable=False),
                        Column("value", OpenType()),
                    ],
                )
            ),
            nullable=True,
        ),
    )
    op.add_column(
        "organization",
        sa.Column(
            "text",
            fhir_server.elements.base.complex_mixin.PgComposite(
                "fhir_narrative",
                [
                    Column(
                        "extension",
                        PgComposite(
                            "fhir_extension",
                            [
                                Column("url", StringField(), nullable=False),
                                Column("value", OpenType()),
                            ],
                        ),
                    ),
                    Column("id", StringField()),
                    Column("div", StringField(), nullable=False),
                    Column("status", CodeField(), nullable=False),
                ],
            ),
            nullable=True,
        ),
    )
    op.add_column(
        "structuredefinition",
        sa.Column(
            "contained",
            sqlalchemy_utils.types.pg_composite.CompositeArray(JSONType()),
            nullable=True,
        ),
    )
    op.add_column(
        "structuredefinition",
        sa.Column(
            "extension",
            sqlalchemy_utils.types.pg_composite.CompositeArray(
                PgComposite(
                    "fhir_extension",
                    [
                        Column("url", StringField(), nullable=False),
                        Column("value", OpenType()),
                    ],
                )
            ),
            nullable=True,
        ),
    )
    op.add_column(
        "structuredefinition",
        sa.Column(
            "modifierExtension",
            sqlalchemy_utils.types.pg_composite.CompositeArray(
                PgComposite(
                    "fhir_extension",
                    [
                        Column("url", StringField(), nullable=False),
                        Column("value", OpenType()),
                    ],
                )
            ),
            nullable=True,
        ),
    )
    op.add_column(
        "structuredefinition",
        sa.Column(
            "text",
            fhir_server.elements.base.complex_mixin.PgComposite(
                "fhir_narrative",
                [
                    Column(
                        "extension",
                        PgComposite(
                            "fhir_extension",
                            [
                                Column("url", StringField(), nullable=False),
                                Column("value", OpenType()),
                            ],
                        ),
                    ),
                    Column("id", StringField()),
                    Column("div", StringField(), nullable=False),
                    Column("status", CodeField(), nullable=False),
                ],
            ),
            nullable=True,
        ),
    )
    ### end Alembic commands ###

    conn = op.get_bind()
    for resource in all_resources:
        conn.execute(
            sa.sql.text(
                """
            DROP INDEX IF EXISTS {0}_meta_version_id;

            CREATE UNIQUE INDEX {0}_meta_version_id ON {0} (
                ((meta).version_id));

            DROP TRIGGER IF EXISTS meta_version_id_concurrency ON {0};

            CREATE TRIGGER meta_version_id_concurrency BEFORE INSERT OR UPDATE ON {0}
            FOR EACH ROW EXECUTE PROCEDURE meta_version_id_concurrency();
            """.format(
                    resource.__tablename__
                )
            )
        )

    profiled_resources = {con.get("resource"): con.get("fields") for con in constraints}
    for resource, const in profiled_resources.items():
        for c in const:
            field = c.get("name")
            mini = str(c.get("cardinality").get("mini"))
            maxi = str(c.get("cardinality").get("maxi"))
            conn.execute(
                sa.sql.text(
                    """
                DROP TRIGGER IF EXISTS validate_meta_fields_{1} ON {0};

                CREATE TRIGGER validate_meta_fields_{1} BEFORE INSERT OR UPDATE ON {0}
                FOR EACH ROW EXECUTE PROCEDURE validate_meta_fields({1}, '{2}', '{3}');
                """.format(
                        resource.lower(), field, mini, maxi
                    )
                )
            )


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("structuredefinition", "text")
    op.drop_column("structuredefinition", "modifierExtension")
    op.drop_column("structuredefinition", "extension")
    op.drop_column("structuredefinition", "contained")
    op.drop_column("organization", "text")
    op.drop_column("organization", "modifierExtension")
    op.drop_column("organization", "extension")
    op.drop_column("organization", "contained")
    ### end Alembic commands ###
